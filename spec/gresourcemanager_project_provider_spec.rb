# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by puppet-codegen and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------

require 'spec_helper'

describe Puppet::Type.type(:gresourcemanager_project).provider(:google) do
  before(:all) do
    cred = Google::FakeAuthorization.new
    Puppet::Type.type(:gauth_credential)
                .define_singleton_method(:fetch) { |_resource| cred }
  end

  it '#instances' do
    expect { described_class.instances }.to raise_error(StandardError,
                                                        /not supported/)
  end

  context 'ensure == present' do
    context 'resource exists' do
      # Ensure present: resource exists, no change
      context 'no changes == no action' do
        # Ensure present: resource exists, no change, no name
        context 'title == name' do
          # Ensure present: resource exists, no change, no name, pass
          context 'title == name (pass)' do
            before do
              allow(Time).to receive(:now).and_return(
                Time.new(2017, 1, 2, 3, 4, 5)
              )
              expect_network_get_success 1, name: 'title0'
              expect_network_get_success 2, name: 'title1'
              expect_network_get_success 3, name: 'title2'
            end

            let(:catalog) do
              apply_with_error_check(
                <<-MANIFEST
                gresourcemanager_project { 'title0':
                  ensure     => present,
                  id         => 'test id#0 data',
                  labels     => {
                    'test labels#1 data' => 'test labels#1 data',
                    'test labels#2 data' => 6131251034,
                  },
                  parent     => {
                    id   => 'test id#0 data',
                    type => 'test type#0 data',
                  },
                  project    => 'test project#0 data',
                  credential => 'cred0',
                }

                gresourcemanager_project { 'title1':
                  ensure     => present,
                  id         => 'test id#1 data',
                  labels     => {
                    'test labels#2 data' => 'test labels#2 data',
                    'test labels#3 data' => 8175001379,
                    'test labels#4 data' => 'test labels#4 data',
                  },
                  parent     => {
                    id   => 'test id#1 data',
                    type => 'test type#1 data',
                  },
                  project    => 'test project#1 data',
                  credential => 'cred1',
                }

                gresourcemanager_project { 'title2':
                  ensure     => present,
                  id         => 'test id#2 data',
                  labels     => {
                    'test labels#3 data' => 'test labels#3 data',
                    'test labels#4 data' => 10218751724,
                    'test labels#5 data' => 'test labels#5 data',
                    'test labels#6 data' => 14306252413,
                  },
                  parent     => {
                    id   => 'test id#2 data',
                    type => 'test type#2 data',
                  },
                  project    => 'test project#2 data',
                  credential => 'cred2',
                }
                MANIFEST
              ).catalog
            end

            context 'Gresourcemanager_project[title0]' do
              subject do
                catalog.resource('Gresourcemanager_project[title0]').provider
              end

              it { is_expected.to have_attributes(number: 1_692_438_494) }
              it do
                is_expected
                  .to have_attributes(
                    lifecycle_state: 'LIFECYCLE_STATE_UNSPECIFIED'
                  )
              end
              it { is_expected.to have_attributes(name: 'title0') }
              it do
                is_expected
                  .to have_attributes(
                    create_time: ::Time.parse('2026-01-08T17:18:36+00:00')
                  )
              end
              # TODO(nelsonjr): Implement complex namevalues property test.
              # it 'labels' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'parent' do
              #   # Add test code here
              # end
            end

            context 'Gresourcemanager_project[title1]' do
              subject do
                catalog.resource('Gresourcemanager_project[title1]').provider
              end

              it { is_expected.to have_attributes(number: 3_384_876_989) }
              it { is_expected.to have_attributes(lifecycle_state: 'ACTIVE') }
              it { is_expected.to have_attributes(name: 'title1') }
              it do
                is_expected
                  .to have_attributes(
                    create_time: ::Time.parse('2082-01-16T10:37:12+00:00')
                  )
              end
              # TODO(nelsonjr): Implement complex namevalues property test.
              # it 'labels' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'parent' do
              #   # Add test code here
              # end
            end

            context 'Gresourcemanager_project[title2]' do
              subject do
                catalog.resource('Gresourcemanager_project[title2]').provider
              end

              it { is_expected.to have_attributes(number: 5_077_315_484) }
              it do
                is_expected
                  .to have_attributes(lifecycle_state: 'DELETE_REQUESTED')
              end
              it { is_expected.to have_attributes(name: 'title2') }
              it do
                is_expected
                  .to have_attributes(
                    create_time: ::Time.parse('2138-01-25T03:55:48+00:00')
                  )
              end
              # TODO(nelsonjr): Implement complex namevalues property test.
              # it 'labels' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'parent' do
              #   # Add test code here
              # end
            end
          end

          # Ensure present: resource exists, no change, no name, fail
          context 'title == name (fail)' do
            # TODO(nelsonjr): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end

        # Ensure present: resource exists, no change, has name
        context 'title != name' do
          # Ensure present: resource exists, no change, has name, pass
          context 'title != name (pass)' do
            before do
              allow(Time).to receive(:now).and_return(
                Time.new(2017, 1, 2, 3, 4, 5)
              )
              expect_network_get_success 1
              expect_network_get_success 2
              expect_network_get_success 3
            end

            let(:catalog) do
              apply_with_error_check(
                <<-MANIFEST
                gresourcemanager_project { 'title0':
                  ensure     => present,
                  id         => 'test id#0 data',
                  labels     => {
                    'test labels#1 data' => 'test labels#1 data',
                    'test labels#2 data' => 6131251034,
                  },
                  name       => 'test name#0 data',
                  parent     => {
                    id   => 'test id#0 data',
                    type => 'test type#0 data',
                  },
                  project    => 'test project#0 data',
                  credential => 'cred0',
                }

                gresourcemanager_project { 'title1':
                  ensure     => present,
                  id         => 'test id#1 data',
                  labels     => {
                    'test labels#2 data' => 'test labels#2 data',
                    'test labels#3 data' => 8175001379,
                    'test labels#4 data' => 'test labels#4 data',
                  },
                  name       => 'test name#1 data',
                  parent     => {
                    id   => 'test id#1 data',
                    type => 'test type#1 data',
                  },
                  project    => 'test project#1 data',
                  credential => 'cred1',
                }

                gresourcemanager_project { 'title2':
                  ensure     => present,
                  id         => 'test id#2 data',
                  labels     => {
                    'test labels#3 data' => 'test labels#3 data',
                    'test labels#4 data' => 10218751724,
                    'test labels#5 data' => 'test labels#5 data',
                    'test labels#6 data' => 14306252413,
                  },
                  name       => 'test name#2 data',
                  parent     => {
                    id   => 'test id#2 data',
                    type => 'test type#2 data',
                  },
                  project    => 'test project#2 data',
                  credential => 'cred2',
                }
                MANIFEST
              ).catalog
            end

            context 'Gresourcemanager_project[title0]' do
              subject do
                catalog.resource('Gresourcemanager_project[title0]').provider
              end

              it { is_expected.to have_attributes(number: 1_692_438_494) }
              it do
                is_expected
                  .to have_attributes(
                    lifecycle_state: 'LIFECYCLE_STATE_UNSPECIFIED'
                  )
              end
              it { is_expected.to have_attributes(name: 'test name#0 data') }
              it do
                is_expected
                  .to have_attributes(
                    create_time: ::Time.parse('2026-01-08T17:18:36+00:00')
                  )
              end
              # TODO(nelsonjr): Implement complex namevalues property test.
              # it 'labels' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'parent' do
              #   # Add test code here
              # end
            end

            context 'Gresourcemanager_project[title1]' do
              subject do
                catalog.resource('Gresourcemanager_project[title1]').provider
              end

              it { is_expected.to have_attributes(number: 3_384_876_989) }
              it { is_expected.to have_attributes(lifecycle_state: 'ACTIVE') }
              it { is_expected.to have_attributes(name: 'test name#1 data') }
              it do
                is_expected
                  .to have_attributes(
                    create_time: ::Time.parse('2082-01-16T10:37:12+00:00')
                  )
              end
              # TODO(nelsonjr): Implement complex namevalues property test.
              # it 'labels' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'parent' do
              #   # Add test code here
              # end
            end

            context 'Gresourcemanager_project[title2]' do
              subject do
                catalog.resource('Gresourcemanager_project[title2]').provider
              end

              it { is_expected.to have_attributes(number: 5_077_315_484) }
              it do
                is_expected
                  .to have_attributes(lifecycle_state: 'DELETE_REQUESTED')
              end
              it { is_expected.to have_attributes(name: 'test name#2 data') }
              it do
                is_expected
                  .to have_attributes(
                    create_time: ::Time.parse('2138-01-25T03:55:48+00:00')
                  )
              end
              # TODO(nelsonjr): Implement complex namevalues property test.
              # it 'labels' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'parent' do
              #   # Add test code here
              # end
            end
          end

          # Ensure present: resource exists, no change, has name, fail
          context 'title != name (fail)' do
            # TODO(nelsonjr): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end
      end

      # Ensure present: resource exists, changes
      context 'changes == action' do
        # Ensure present: resource exists, changes, no name
        context 'title == name' do
          # Ensure present: resource exists, changes, no name, pass
          context 'title == name (pass)' do
            # TODO(nelsonjr): Implement new test format.
          end

          # Ensure present: resource exists, changes, no name, fail
          context 'title == name (fail)' do
            # TODO(nelsonjr): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end

        # Ensure present: resource exists, changes, has name
        context 'title != name' do
          # Ensure present: resource exists, changes, has name, pass
          context 'title != name (pass)' do
            # TODO(nelsonjr): Implement new test format.
          end

          # Ensure present: resource exists, changes, has name, fail
          context 'title != name (fail)' do
            # TODO(nelsonjr): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end
      end
    end

    context 'resource missing' do
      # Ensure present: resource missing, ignore, no name
      context 'title == name' do
        # Ensure present: resource missing, ignore, no name, pass
        context 'title == name (pass)' do
          before(:each) do
            expect_network_get_failed 1, name: 'title0'
            expect_network_create \
              1,
              {
                'name' => 'title0',
                'labels' => {
                  'test labels#1 data' => 'test labels#1 data',
                  'test labels#2 data' => 6_131_251_034
                },
                'parent' => {
                  'type' => 'test type#0 data',
                  'id' => 'test id#0 data'
                },
                'projectId' => 'test id#0 data'
              },
              name: 'title0'
          end

          subject do
            apply_with_error_check(
              <<-MANIFEST
              gresourcemanager_project { 'title0':
                ensure     => present,
                id         => 'test id#0 data',
                labels     => {
                  'test labels#1 data' => 'test labels#1 data',
                  'test labels#2 data' => 6131251034,
                },
                parent     => {
                  id   => 'test id#0 data',
                  type => 'test type#0 data',
                },
                project    => 'test project#0 data',
                credential => 'cred0',
              }
              MANIFEST
            ).catalog.resource('Gresourcemanager_project[title0]').provider
              .ensure
          end

          it { is_expected.to eq :present }
        end

        # Ensure present: resource missing, ignore, no name, fail
        context 'title == name (fail)' do
          # TODO(nelsonjr): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end

      # Ensure present: resource missing, ignore, has name
      context 'title != name' do
        # Ensure present: resource missing, ignore, has name, pass
        context 'title != name (pass)' do
          before(:each) do
            expect_network_get_failed 1
            expect_network_create \
              1,
              'name' => 'test name#0 data',
              'labels' => {
                'test labels#1 data' => 'test labels#1 data',
                'test labels#2 data' => 6_131_251_034
              },
              'parent' => {
                'type' => 'test type#0 data',
                'id' => 'test id#0 data'
              },
              'projectId' => 'test id#0 data'
          end

          subject do
            apply_with_error_check(
              <<-MANIFEST
              gresourcemanager_project { 'title0':
                ensure     => present,
                id         => 'test id#0 data',
                labels     => {
                  'test labels#1 data' => 'test labels#1 data',
                  'test labels#2 data' => 6131251034,
                },
                name       => 'test name#0 data',
                parent     => {
                  id   => 'test id#0 data',
                  type => 'test type#0 data',
                },
                project    => 'test project#0 data',
                credential => 'cred0',
              }
              MANIFEST
            ).catalog.resource('Gresourcemanager_project[title0]').provider
              .ensure
          end

          it { is_expected.to eq :present }
        end

        # Ensure present: resource missing, ignore, has name, fail
        context 'title != name (fail)' do
          # TODO(nelsonjr): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end
    end
  end

  context 'ensure == absent' do
    context 'resource missing' do
      # Ensure absent: resource missing, ignore, no name
      context 'title == name' do
        # Ensure absent: resource missing, ignore, no name, pass
        context 'title == name (pass)' do
          before(:each) do
            expect_network_get_failed 1, name: 'title0'
          end

          subject do
            apply_with_error_check(
              <<-MANIFEST
              gresourcemanager_project { 'title0':
                ensure     => absent,
                id         => 'test id#0 data',
                project    => 'test project#0 data',
                credential => 'cred0',
              }
              MANIFEST
            ).catalog.resource('Gresourcemanager_project[title0]')
              .provider.ensure
          end

          it { is_expected.to eq :absent }
        end

        # Ensure absent: resource missing, ignore, no name, fail
        context 'title == name (fail)' do
          # TODO(nelsonjr): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end

      # Ensure absent: resource missing, ignore, has name
      context 'title != name' do
        # Ensure absent: resource missing, ignore, has name, pass
        context 'title != name (pass)' do
          before(:each) do
            expect_network_get_failed 1
          end

          subject do
            apply_with_error_check(
              <<-MANIFEST
              gresourcemanager_project { 'title0':
                ensure     => absent,
                id         => 'test id#0 data',
                name       => 'test name#0 data',
                project    => 'test project#0 data',
                credential => 'cred0',
              }
              MANIFEST
            ).catalog.resource('Gresourcemanager_project[title0]')
              .provider.ensure
          end

          it { is_expected.to eq :absent }
        end

        # Ensure absent: resource missing, ignore, has name, fail
        context 'title != name (fail)' do
          # TODO(nelsonjr): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end
    end

    context 'resource exists' do
      # Ensure absent: resource exists, ignore, no name
      context 'title == name' do
        # Ensure absent: resource exists, ignore, no name, pass
        context 'title == name (pass)' do
          before(:each) do
            expect_network_get_success 1, name: 'title0'
            expect_network_delete 1, 'title0'
          end

          subject do
            apply_with_error_check(
              <<-MANIFEST
              gresourcemanager_project { 'title0':
                ensure     => absent,
                id         => 'test id#0 data',
                project    => 'test project#0 data',
                credential => 'cred0',
              }
              MANIFEST
            ).catalog.resource('Gresourcemanager_project[title0]')
              .provider.ensure
          end

          it { is_expected.to eq :absent }
        end

        # Ensure absent: resource exists, ignore, no name, fail
        context 'title == name (fail)' do
          # TODO(nelsonjr): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end

      # Ensure absent: resource exists, ignore, has name
      context 'title != name' do
        # Ensure absent: resource exists, ignore, has name, pass
        context 'title != name (pass)' do
          before(:each) do
            expect_network_get_success 1
            expect_network_delete 1
          end

          subject do
            apply_with_error_check(
              <<-MANIFEST
              gresourcemanager_project { 'title0':
                ensure     => absent,
                id         => 'test id#0 data',
                name       => 'test name#0 data',
                project    => 'test project#0 data',
                credential => 'cred0',
              }
              MANIFEST
            ).catalog.resource('Gresourcemanager_project[title0]')
              .provider.ensure
          end

          it { is_expected.to eq :absent }
        end

        # Ensure absent: resource exists, ignore, has name, fail
        context 'title != name (fail)' do
          # TODO(nelsonjr): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end
    end
  end

  context '#flush' do
    subject do
      Puppet::Type.type(:gresourcemanager_project).new(
        ensure: :present,
        name: 'my-name'
      ).provider
    end
    context 'no-op' do
      it { subject.flush }
    end
    context 'modified object' do
      before do
        subject.dirty :some_property, 'current', 'newvalue'
      end
      context 'no-op if created' do
        before { subject.instance_variable_set(:@created, true) }
        it { expect { subject.flush }.not_to raise_error }
      end
      context 'no-op if deleted' do
        before { subject.instance_variable_set(:@deleted, true) }
        it { expect { subject.flush }.not_to raise_error }
      end
    end
  end

  private

  def expect_network_get_success(id, data = {})
    id_data = data.fetch(:name, '').include?('title') ? 'title' : 'name'
    body = load_network_result("success#{id}~#{id_data}.yaml").to_json

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! GET #{self_link(uri_data(id).merge(data))}"
    expect(Google::Resourcemanager::Network::Get).to receive(:new)
      .with(self_link(uri_data(id).merge(data)),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET #{args}"
      request
    end
  end

  def http_success(body)
    response = Net::HTTPOK.new(1.0, 200, 'OK')
    response.body = body
    response.instance_variable_set(:@read, true)
    response
  end

  def expect_network_get_failed(id, data = {})
    request = double('request')
    allow(request).to receive(:send).and_return(http_failed_object_missing)

    debug_network "!! #{self_link(uri_data(id).merge(data))}"
    expect(Google::Resourcemanager::Network::Get).to receive(:new)
      .with(self_link(uri_data(id).merge(data)),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET [failed] #{args}"
      request
    end
  end

  def http_failed_object_missing
    Net::HTTPNotFound.new(1.0, 404, 'Not Found')
  end

  def expect_network_create(id, expected_body, data = {})
    merged_uri = uri_data(id).merge(data)
    body = {}.to_json

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! POST #{collection(merged_uri)}"
    expect(Google::Resourcemanager::Network::Post).to receive(:new)
      .with(collection(merged_uri), instance_of(Google::FakeAuthorization),
            'application/json', expected_body.to_json) do |args|
      debug_network ">> POST #{args} = body(#{body})"
      request
    end
  end

  def expect_network_delete(id, name = nil, data = {})
    delete_data = uri_data(id).merge(data)
    delete_data[:name] = name unless name.nil?
    body = {}.to_json

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! DELETE #{self_link(delete_data)}"
    expect(Google::Resourcemanager::Network::Delete).to receive(:new)
      .with(self_link(delete_data),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> DELETE #{args}"
      request
    end
  end

  def load_network_result(file)
    results = File.join(File.dirname(__FILE__), 'data', 'network',
                        'gresourcemanager_project', file)
    debug("Loading result file: #{results}")
    raise "Network result data file #{results}" unless File.exist?(results)
    data = YAML.safe_load(File.read(results))
    raise "Invalid network results #{results}" unless data.class <= Hash
    data
  end

  def debug(message)
    puts(message) if ENV['RSPEC_DEBUG']
  end

  def debug_network(message)
    puts("Network #{message}") \
      if ENV['RSPEC_DEBUG'] || ENV['RSPEC_HTTP_VERBOSE']
  end

  def create_type(id)
    Puppet::Type.type(:gresourcemanager_project).new(
      ensure: :present,
      title: "title#{id - 1}",
      credential: "cred#{id - 1}",
      id: GoogleTests::Constants::P_ID_DATA[(id - 1) \
        % GoogleTests::Constants::P_ID_DATA.size]
    )
  end

  def expand_variables(template, data, extra_data = {})
    Puppet::Type.type(:gresourcemanager_project).provider(:google)
                .expand_variables(template, data, extra_data)
  end

  def collection(data)
    URI.join(
      'https://cloudresourcemanager.googleapis.com/v1/',
      expand_variables(
        'projects',
        data
      )
    )
  end

  def self_link(data)
    URI.join(
      'https://cloudresourcemanager.googleapis.com/v1/',
      expand_variables(
        'projects/{{id}}',
        data
      )
    )
  end

  # Creates variable test data to comply with self_link URI parameters
  def uri_data(id)
    {
      id: GoogleTests::Constants::P_ID_DATA[(id - 1) \
        % GoogleTests::Constants::P_ID_DATA.size]
    }
  end
end
